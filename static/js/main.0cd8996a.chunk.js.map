{"version":3,"sources":["functions.ts","App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DEFAULT","sortField","setSortField","isReversed","setIsReversed","goods","reverse","data","ALPHABET","sort","a","b","localeCompare","LENGTH","length","sortData","className","type","cn","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAaYA,E,4DAbNC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGUD,K,oBAAAA,E,gBAAAA,E,YAAAA,M,KAML,I,OCZME,EAAgB,WAC3B,MACIC,mBAAmBH,EAASI,SADhC,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EDQgB,SAACJ,EAAqBK,GAC5C,IAAMC,EAAc,UAAOV,GAE3B,OAAQI,GACN,KAAKL,EAASY,SACZD,EAAKE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MACpC,MACF,KAAKf,EAASiB,OACZN,EAAKE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAUrC,OAJIR,GACFC,EAAKD,UAGAC,EC1BOQ,CAASd,EAAWE,GAOlC,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYjB,IAAcL,EAASY,WAGvCW,QAAS,kBAAMjB,EAAaN,EAASY,WARvC,iCAaA,wBACES,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYjB,IAAcL,EAASiB,SAGvCM,QAAS,kBAAMjB,EAAaN,EAASiB,SARvC,4BAaA,wBACEI,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAA2B,IAAff,IAGhBgB,QAAS,WACPf,GAAc,SAAAgB,GAAO,OAAKA,MAT9B,sBAeEnB,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QArDI,WACZjB,EAAaN,EAASI,SACtBI,GAAc,IAgDR,sBAUJ,6BACE,6BACGC,EAAMgB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cCzEpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0cd8996a.chunk.js","sourcesContent":["const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport enum SortType {\n  ALPHABET = 'alphabet',\n  LENGTH = 'length',\n  DEFAULT = '',\n}\n\nexport const sortData = (sortField: SortType, reverse: boolean): string[] => {\n  const data: string[] = [...goodsFromServer];\n\n  switch (sortField) {\n    case SortType.ALPHABET:\n      data.sort((a, b) => a.localeCompare(b));\n      break;\n    case SortType.LENGTH:\n      data.sort((a, b) => a.length - b.length);\n      break;\n    default:\n      break;\n  }\n\n  if (reverse) {\n    data.reverse();\n  }\n\n  return data;\n};\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nimport { SortType, sortData } from './functions';\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField]\n    = useState<SortType>(SortType.DEFAULT);\n  const [isReversed, setIsReversed] = useState(false);\n  const goods = sortData(sortField, isReversed);\n\n  const reset = () => {\n    setSortField(SortType.DEFAULT);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            {\n              'is-light': sortField !== SortType.ALPHABET,\n            },\n          )}\n          onClick={() => setSortField(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            {\n              'is-light': sortField !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => setSortField(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            {\n              'is-light': isReversed === false,\n            },\n          )}\n          onClick={() => {\n            setIsReversed(current => !current);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}